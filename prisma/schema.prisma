// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Customers {
  id            String  @id @default(cuid())
  email         String  @unique
  name          String
  lastname      String
  phone         String
  status        CustomerStatus  @default(ACTIVE)
  createdAt     DateTime  @default(now())
  services      Services[]
  supports      Supports[]
  houses        CustomerHouses[]
}

enum CustomerStatus {
  ACTIVE
  SUSPENDED
}

model CustomerHouses {
  id            String  @id @default(cuid())
  customerId    String
  latitude      Float
  longitude     Float
  address       String
  distribution  Json
  sizeSqm       Int?
  type          CustomerHouseType
  customer      Customers @relation(fields: [customerId], references: [id])
}

enum CustomerHouseType {
  FLAT
  HOUSE
  OFFICE
}

model Housemaids {
  id            String  @id @default(cuid())
  email         String @unique
  name          String
  lastname      String
  phone         String
  address       String
  status        HousemaidStatus  @default(TRAINING)
  createdAt     DateTime  @default(now())
  services      Services[]
  schedules     Schedules[]
  supports      Supports[]
  typeService   TypesServices[]
}

enum HousemaidStatus {
  ACTIVE
  SUSPENDED
  FIRED
  MEDICAL_LEAVE
  VACATION
  TRAINING
}

model Services {
  id            String  @id @default(cuid())
  customerId    String
  housemaidId   String
  typeServiceId String
  initialDate   DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  status        ServiceStatus @default(SCHEDULED)
  customer      Customers @relation(fields: [customerId], references: [id])
  housemaid     Housemaids @relation(fields: [housemaidId], references: [id])
  typeService   TypesServices @relation(fields: [typeServiceId], references: [id])
}

enum ServiceStatus {
  SCHEDULED
  IN_PROGRESS
  SUSPENDED
  FINISHED
  CANCELED
}

model TypesServices {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Int
  createdAt   DateTime @default(now())
  services    Services[]
  housemaids  Housemaids[]
}

model Evaluations {
  id                String   @id @default(cuid())
  evaluatedEntity   EvaluatedEntityType
  evaluatedEntityId String
  score             Int
  comments          String
  title             String
  type              EvaluationsType
  createdAt         DateTime @default(now())
}

enum EvaluationsType {
  CUSTOMER_REVIEW
  HOUSEMAID_REVIEW
}

enum EvaluatedEntityType {
  HOUSEMAID
  CUSTOMER
  SERVICE
}

model Schedules {
  id          String   @id @default(cuid())
  housemaidId String
  dayOfWeek   DayOfWeek
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  housemaid   Housemaids @relation(fields: [housemaidId], references: [id])

  @@unique([housemaidId, dayOfWeek, startTime, endTime])
  @@index([housemaidId])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Documents {
  id                String  @id @default(cuid())
  title             String
  url               String
  type              DocumentType
  documentOwnerType DocumentOwnerType
  documentOwnerId   String
  createdAt         DateTime  @default(now())
}

enum DocumentType {
  CONTRACT
  ID_CARD
  RESUME
  BACKGROUND_CHECK
  SUPPORT_DOCUMENT
}

enum DocumentOwnerType {
  CUSTOMER
  HOUSEMAID
  SUPPORT_TICKET
}

model Supports {
  id          String  @id @default(cuid())
  housemaidId String
  customerId  String
  tittle      String
  comments    String
  status      SupportStatus @default(NEW)
  createdAt   DateTime @default(now())
  housemaid   Housemaids @relation(fields: [housemaidId], references: [id])
  customer    Customers @relation(fields: [customerId], references: [id])
}

enum SupportStatus {
  NEW
  IN_PROGRESS
  CLOSED
}