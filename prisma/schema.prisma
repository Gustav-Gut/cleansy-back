// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customers {
  id            String  @id @default(cuid())
  email         String  @unique
  name          String
  lastname      String
  phone         String
  status        CustomerStatus  @default(active)
  createdAt     DateTime  @default(now())
  services      Services[]
  califications Califications[]
  documents     Documents[]
  supports      Supports[]
  houses        CustomerHouses[]
}

enum CustomerStatus {
  active
  suspended
}

model CustomerHouses {
  id            String  @id @default(cuid())
  customerId    String
  lat           Int
  long          Int
  address       String
  distribution  String
  messure       Int[]
  type          CustomerHouseType
  customer      Customers @relation(fields: [customerId], references: [id])
}

enum CustomerHouseType {
  flat
  house
  office
}

model Housemaids {
  id            String  @id @default(cuid())
  email         String @unique
  name          String
  lastname      String
  phone         String
  address       String
  status        HousemaidStatus  @default(training)
  createdAt     DateTime  @default(now())
  services      Services[]
  califications Califications[]
  schedule      Schedules[]
  documents     Documents[]
  supports      Supports[]
  typeService   TypesServices[]
}

enum HousemaidStatus {
  active
  suspended
  fired
  medical_leave
  vacation
  training
}

model Services {
  id            String  @id @default(cuid())
  customerId    String
  housemaidId   String
  typeServiceid String
  initialDate   DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  status        ServiceStatus @default(scheduled)
  calification  Califications?
  schedule      Schedules?
  customer      Customers @relation(fields: [customerId], references: [id])
  housemaid     Housemaids @relation(fields: [housemaidId], references: [id])
  typeService   TypesServices @relation(fields: [typeServiceid], references: [id])
}

enum ServiceStatus {
  scheduled
  in_progress
  suspended
  finished
  canceled
}

model TypesServices {
  id          String   @id @default(cuid())
  title       String
  description String
  value       Int
  createdAt   DateTime @default(now())
  services    Services[]
  housemaids  Housemaids[]
}

model Califications {
  id          String   @id @default(cuid())
  housemaidId String? @unique
  customerId  String? @unique
  serviceId   String? @unique
  score       Int
  comments    String
  title       String
  type        CalificationType
  createdAt   DateTime @default(now())
  customer    Customers? @relation(fields: [customerId], references: [id])
  housemaid   Housemaids? @relation(fields: [housemaidId], references: [id])
  service     Services? @relation(fields: [serviceId], references: [id])
}

enum CalificationType {
  customer_review
  housemaid_review
}

model Schedules {
  id          String   @id @default(cuid())
  housemaidId String
  serviceId   String @unique
  days        String[]
  hours       String[]
  createdAt   DateTime @default(now())
  housemaid   Housemaids @relation(fields: [housemaidId], references: [id])
  service     Services @relation(fields: [serviceId], references: [id])   
}

model Documents {
  id          String  @id @default(cuid())
  housemaidId String  @unique
  customerId  String  @unique
  supportId   String  @unique
  title       String
  url         String
  type        DocumentType
  createdAt   DateTime  @default(now())
  housemaid   Housemaids  @relation(fields: [housemaidId], references: [id])
  customer    Customers @relation(fields: [customerId], references: [id])
  Support     Supports  @relation(fields: [supportId], references: [id])
}

enum DocumentType {
  contract
  id_card
  resume
  background_check
  support_document
}

model Supports {
  id          String  @id @default(cuid())
  housemaidId String
  customerId  String
  tittle      String
  comments    String
  status      SupportStatus @default(new)
  createdAt   DateTime @default(now())
  documents   Documents[]
  housemaid   Housemaids @relation(fields: [housemaidId], references: [id])
  customer    Customers @relation(fields: [customerId], references: [id])
}

enum SupportStatus {
  new
  in_progress
  closed
}